version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: disaster_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: disaster_response
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./ai_services/database/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - disaster_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d disaster_response"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: disaster_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - disaster_network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # FastAPI Backend Service
  backend:
    build:
      context: ./ai_services
      dockerfile: Dockerfile
    container_name: disaster_backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/disaster_response
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-please-change-in-production}
      - DEBUG=true
      - ENVIRONMENT=development
      - CORS_ORIGINS=["http://localhost:3000","http://localhost:80","http://frontend:3000"]
      - APP_NAME="Disaster Response Coordination"
      - APP_VERSION="1.0.0"
      - LOG_LEVEL=info
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./ai_services:/app
      - ./logs:/app/logs
    networks:
      - disaster_network
    command: uv run uvicorn main:app --host 0.0.0.0 --port 8000 --reload --log-level debug
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`localhost`) && PathPrefix(`/api`)"
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # React Frontend Service (Production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: disaster_frontend
    restart: unless-stopped
    ports:
      - "80:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - disaster_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`localhost`)"
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Background Task Worker
  worker:
    build:
      context: ./ai_services
      dockerfile: Dockerfile
    container_name: disaster_worker
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/disaster_response
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-please-change-in-production}
      - WORKER_CONCURRENCY=4
      - WORKER_LOGLEVEL=info
      - ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./ai_services:/app
      - ./logs:/app/logs
    networks:
      - disaster_network
    command: uv run celery worker -A core.celery_app.celery --loglevel=info --concurrency=4
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Celery Beat Scheduler
  scheduler:
    build:
      context: ./ai_services
      dockerfile: Dockerfile
    container_name: disaster_scheduler
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/disaster_response
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-please-change-in-production}
      - ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./ai_services:/app
      - ./logs:/app/logs
    networks:
      - disaster_network
    command: uv run celery beat -A core.celery_app.celery --loglevel=info --schedule=/tmp/celerybeat-schedule
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Flower - Celery Monitoring
  flower:
    build:
      context: ./ai_services
      dockerfile: Dockerfile
    container_name: disaster_flower
    restart: unless-stopped
    environment:
      - CELERY_BROKER_URL=redis://redis:6379
      - FLOWER_PORT=5555
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - disaster_network
    command: uv run celery flower --broker=redis://redis:6379 --port=5555
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Database Admin (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: disaster_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@disaster.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - disaster_network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Redis Commander - Redis UI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: disaster_redis_commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - disaster_network
    profiles:
      - monitoring

  # Development Tools Container
  dev-tools:
    build:
      context: ./ai_services
      dockerfile: Dockerfile
    container_name: disaster_dev_tools
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/disaster_response
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-please-change-in-production}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./ai_services:/app
      - ./scripts:/scripts
      - ./data:/data
    networks:
      - disaster_network
    command: tail -f /dev/null
    profiles:
      - dev

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v2.10
    container_name: disaster_traefik
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "8080:8080"  # Traefik dashboard
      - "80:80"      # HTTP entrypoint
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - disaster_network
    profiles:
      - reverse-proxy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  disaster_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
