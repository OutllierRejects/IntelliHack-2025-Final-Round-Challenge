# Disaster Response Coordination App - Development Makefile
# Using UV package manager for Python dependencies

.PHONY: help install dev test lint format clean docker-up docker-down db-migrate db-seed

# Default target
help:
	@echo "Disaster Response Coordination App - Development Commands"
	@echo ""
	@echo "📦 Setup Commands:"
	@echo "  dev-setup    - Complete development environment setup"
	@echo "  install      - Install all dependencies (backend + frontend)"
	@echo "  create-env   - Create environment file from template"
	@echo ""
	@echo "🚀 Development Commands:"
	@echo "  dev-backend  - Run FastAPI backend with hot reload"
	@echo "  dev-frontend - Run React frontend development server"
	@echo "  dev          - Run both backend and frontend concurrently"
	@echo ""
	@echo "🐳 Docker Commands:"
	@echo "  docker-up    - Start all services with Docker Compose"
	@echo "  docker-down  - Stop all Docker services"
	@echo "  docker-build - Build all Docker images"
	@echo "  docker-dev   - Start development services (DB + Redis only)"
	@echo "  docker-logs  - View logs from all services"
	@echo "  docker-clean - Clean up containers and volumes"
	@echo ""
	@echo "🗃️  Database Commands:"
	@echo "  db-migrate   - Run database migrations"
	@echo "  db-seed      - Load sample data"
	@echo "  db-reset     - Reset database (⚠️  destructive)"
	@echo ""
	@echo "🧪 Testing & Quality:"
	@echo "  test         - Run all tests"
	@echo "  test-backend - Run backend tests only"
	@echo "  test-frontend- Run frontend tests only"
	@echo "  lint         - Run linting"
	@echo "  format       - Format code"
	@echo ""
	@echo "🛠️  Utilities:"
	@echo "  clean        - Clean build artifacts and caches"
	@echo "  logs         - Show application logs"
	@echo "  agent-status - Check AI agent status"

# ==============================================================================
# 📦 SETUP COMMANDS
# ==============================================================================

dev-setup: create-env install docker-dev db-migrate db-seed
	@echo "✅ Development environment setup complete!"
	@echo ""
	@echo "🚀 Next steps:"
	@echo "  1. Update ai_services/.env with your OpenAI API key"
	@echo "  2. Run 'make dev' to start development servers"
	@echo "  3. Visit http://localhost:3000 for frontend"
	@echo "  4. Visit http://localhost:8000/docs for API docs"

# Installation
install: install-backend install-frontend
	@echo "✅ All dependencies installed successfully!"

install-backend:
	@echo "📦 Installing backend dependencies with UV..."
	@cd ai_services && uv sync
	@echo "✅ Backend dependencies installed"

install-frontend:
	@echo "📦 Installing frontend dependencies with pnpm..."
	@cd frontend && pnpm install
	@echo "✅ Frontend dependencies installed"

create-env:
	@echo "📝 Creating environment file..."
	@if [ ! -f ai_services/.env ]; then \
		cp ai_services/.env.example ai_services/.env; \
		echo "✅ Created ai_services/.env from template"; \
		echo "⚠️  Please edit ai_services/.env with your configuration"; \
	else \
		echo "ℹ️  Environment file already exists"; \
	fi

# ==============================================================================
# 🚀 DEVELOPMENT COMMANDS  
# ==============================================================================

dev:
	@echo "🚀 Starting development servers..."
	@echo "Backend: http://localhost:8000"
	@echo "Frontend: http://localhost:3000"
	@echo "API Docs: http://localhost:8000/docs"
	@$(MAKE) -j2 dev-backend dev-frontend

dev-backend:
	@echo "🐍 Starting FastAPI backend with hot reload..."
	@cd ai_services && uv run uvicorn main:app --reload --host 0.0.0.0 --port 8000

dev-frontend:
	@echo "⚛️  Starting React frontend development server..."
	@cd frontend && pnpm dev

# ==============================================================================
# 🐳 DOCKER COMMANDS
# ==============================================================================

docker-up:
	@echo "🐳 Starting all services with Docker Compose..."
	@docker-compose up -d
	@echo "✅ Services started! Check status with 'docker-compose ps'"

docker-down:
	@echo "🛑 Stopping all Docker services..."
	@docker-compose down

docker-build:
	@echo "🔨 Building all Docker images..."
	@docker-compose build

docker-dev:
	@echo "🐳 Starting development services (PostgreSQL + Redis)..."
	@docker-compose up -d postgres redis
	@echo "✅ Development services started"

docker-logs:
	@echo "📋 Showing Docker logs..."
	@docker-compose logs -f

docker-clean:
	@echo "🧹 Cleaning Docker resources..."
	@docker-compose down -v
	@docker system prune -f
	@echo "✅ Docker cleanup complete"

# ==============================================================================
# 🗃️  DATABASE COMMANDS
# ==============================================================================

db-migrate:
	@echo "🗃️  Running database migrations..."
	@cd ai_services && uv run alembic upgrade head
	@echo "✅ Database migrations complete"

db-seed:
	@echo "🌱 Loading sample data..."
	@docker-compose exec -T postgres psql -U postgres -d disaster_response -f /docker-entrypoint-initdb.d/002_sample_data.sql
	@echo "✅ Sample data loaded"

db-reset:
	@echo "⚠️  This will reset the database. All data will be lost!"
	@read -p "Type 'yes' to continue: " confirm && [ "$$confirm" = "yes" ]
	@docker-compose down postgres
	@docker volume rm intelligihack-2025-final-round-challenge_postgres_data || true
	@docker-compose up -d postgres
	@sleep 10
	@$(MAKE) db-migrate db-seed
	@echo "✅ Database reset complete"

# ==============================================================================
# 🤖 AGENT COMMANDS
# ==============================================================================

run-agents:
	@echo "🤖 Starting AGNO agent services..."
	@cd ai_services && uv run python -m agno_agents.coordinator

agent-status:
	@echo "🤖 Checking AI agent status..."
	@curl -f http://localhost:8000/api/v1/agents/status 2>/dev/null || echo "❌ Backend not running or agents not available"

restart-agents:
	@echo "🔄 Restarting AI agent services..."
	@curl -X POST http://localhost:8000/api/v1/agents/restart 2>/dev/null || echo "❌ Backend not running"

# ==============================================================================
# 🧪 TESTING & QUALITY
# ==============================================================================

test: test-backend test-frontend
	@echo "✅ All tests completed!"

test-backend:
	@echo "🧪 Running backend tests..."
	@cd ai_services && uv run pytest -v --cov=. --cov-report=html --cov-report=term

test-frontend:
	@echo "🧪 Running frontend tests..."
	@cd frontend && pnpm test --run --coverage

test-agents:
	@echo "🤖 Testing AGNO agents..."
	@cd ai_services && uv run pytest tests/test_agents/ -v

lint:
	@echo "🔍 Running linting..."
	@cd ai_services && uv run ruff check .
	@cd ai_services && uv run mypy .
	@cd frontend && pnpm lint

format:
	@echo "🎨 Formatting code..."
	@cd ai_services && uv run ruff format .
	@cd ai_services && uv run isort .
	@cd frontend && pnpm format

# ==============================================================================
# 🛠️  UTILITIES
# ==============================================================================

clean:
	@echo "🧹 Cleaning build artifacts and caches..."
	@# Python cache cleanup
	@find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name "*.pyc" -delete 2>/dev/null || true
	@find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name ".coverage" -delete 2>/dev/null || true
	@rm -rf ai_services/htmlcov/ 2>/dev/null || true
	@# Frontend cache cleanup  
	@rm -rf frontend/dist/ 2>/dev/null || true
	@rm -rf frontend/node_modules/.cache/ 2>/dev/null || true
	@rm -rf frontend/coverage/ 2>/dev/null || true
	@echo "✅ Cleanup complete!"

logs:
	@echo "📋 Application logs:"
	@if [ -f ai_services/logs/app.log ]; then \
		tail -f ai_services/logs/app.log; \
	else \
		echo "ℹ️  No log file found. Run the application first."; \
	fi

# ==============================================================================
# 🏥 HEALTH CHECKS
# ==============================================================================

check-backend:
	@echo "🏥 Checking backend health..."
	@curl -f http://localhost:8000/health 2>/dev/null && echo "✅ Backend healthy" || echo "❌ Backend not responding"

check-frontend:
	@echo "🏥 Checking frontend..."
	@curl -f http://localhost:3000 2>/dev/null && echo "✅ Frontend healthy" || echo "❌ Frontend not responding"

check-docker:
	@echo "🐳 Checking Docker services..."
	@docker-compose ps

check: check-backend check-frontend check-docker
	@echo "✅ Health check complete"

# ==============================================================================
# 📋 INFORMATION
# ==============================================================================

status:
	@echo "📊 System Status:"
	@echo "=================="
	@$(MAKE) check
	@echo ""
	@echo "🔗 Service URLs:"
	@echo "  Frontend:    http://localhost:3000"
	@echo "  Backend API: http://localhost:8000" 
	@echo "  API Docs:    http://localhost:8000/docs"
	@echo "  Database:    localhost:5432"
	@echo "  Redis:       localhost:6379"

info:
	@echo "ℹ️  Disaster Response Coordination System"
	@echo "========================================="
	@echo ""
	@echo "📁 Project Structure:"
	@echo "  ai_services/  - FastAPI backend with AGNO agents"
	@echo "  frontend/     - React frontend application"
	@echo "  docs/         - Documentation"
	@echo ""
	@echo "🔧 Technologies:"
	@echo "  Backend:  FastAPI, PostgreSQL, Redis, AGNO, OpenAI"
	@echo "  Frontend: React 19, TypeScript, Tailwind CSS"
	@echo "  Tools:    Docker, UV, pnpm, Make"
	@echo ""
	@echo "📖 Quick Start:"
	@echo "  1. make dev-setup    # Complete setup"
	@echo "  2. make dev          # Start development"
	@echo "  3. Visit http://localhost:3000"
